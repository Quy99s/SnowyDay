{"version":3,"sources":["file:///Users/backup/SnowyDay/SnowyDay/assets/Script/Player.ts"],"names":["_decorator","Component","Node","ParticleSystem2D","RigidBody2D","Vec2","Contact2DType","CircleCollider2D","ccclass","property","Player","onLoad","node","on","fireToPosition","runSkill","bullet","getComponent","BEGIN_CONTACT","onBeginContact","contact","selfCollider","otherCollider","reset","position","force","kine","fireBullet","applyForceToTarget","callBack","setPosition","getPosition","resetSystem","active","bullet2","linearVelocity","scheduleOnce","reset2","stopSystem","target","nodePos","currentPos","x","y","currentAngle","Math","atan2","PI","cos","sin","applyForceToCenter","event","skill","emit"],"mappings":"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","sourcesContent":["\nimport { _decorator, Component, Node, tween, v3, Vec3, ParticleSystem2D, RigidBody2D, Vec2, UITransform, BoxCollider2D, Contact2DType, CircleCollider2D } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('Player')\nexport class Player extends Component {\n\n    @property(Node)\n    bullet: Node;\n    @property(Node)\n    bullet2: Node;\n    @property(Node)\n    skill: Node;\n    tweenMove: any;\n    rigidBody: RigidBody2D;\n\n    onLoad() {\n        this.node.on(\"FIRE_TO_POS\", this.fireToPosition, this);\n        this.node.on('SENT_GIFT', this.runSkill, this);\n        this.bullet.getComponent(CircleCollider2D).on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n    }\n    onBeginContact(contact, selfCollider, otherCollider) {\n        if (selfCollider.node.getComponent('Enemy')) {\n           this.reset()\n        }\n    }\n\n    fireToPosition(position, force, kine) {\n        this.fireBullet(position, kine);\n        this.applyForceToTarget(this.node, position, force)\n    }\n\n    fireBullet(position, kine, callBack = null) {\n        if (kine === 2) {\n            this.bullet.setPosition(this.node.getPosition());\n            this.bullet.getComponent(ParticleSystem2D).resetSystem();\n            this.bullet.active = true;\n            this.applyForceToTarget(this.bullet, position, -1);\n        } else {\n            this.bullet2.setPosition(this.node.getPosition());\n            this.bullet2.getComponent(ParticleSystem2D).resetSystem();\n            this.bullet2.active = true;\n            this.bullet2.getComponent(RigidBody2D).linearVelocity = new Vec2(0, 0);\n            this.scheduleOnce(() => {\n                this.reset2();\n                this.bullet2.active = false;\n            }, 0.3)\n        }\n\n\n    }\n    reset() {\n        this.bullet.getComponent(RigidBody2D).linearVelocity = new Vec2(0, 0);\n        this.bullet.getComponent(ParticleSystem2D).resetSystem();\n        this.bullet.getComponent(ParticleSystem2D).stopSystem();\n        this.bullet.setPosition(this.node.getPosition());\n    }\n\n    reset2() {\n        this.bullet2.getComponent(ParticleSystem2D).resetSystem();\n        this.bullet2.getComponent(ParticleSystem2D).stopSystem();\n    }\n\n    applyForceToTarget(target, position, force) {\n        const nodePos = this.node.getPosition();\n        const currentPos = new Vec2(nodePos.x - position.x, nodePos.y - position.y);\n        const currentAngle = Math.atan2(currentPos.y, currentPos.x) * 180 / Math.PI;\n        const x = force * Math.cos((currentAngle * Math.PI) / 180);\n        const y = force * Math.sin((currentAngle * Math.PI) / 180);\n\n        target.getComponent(RigidBody2D).linearVelocity = new Vec2(0, 0);\n        target.getComponent(RigidBody2D).applyForceToCenter(new Vec2(x, y), true);\n    }\n\n    runSkill(event) {\n        this.skill.emit('ATTACK');\n    }\n}\n"]}